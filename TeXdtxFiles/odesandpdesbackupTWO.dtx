% \iffalse meta-comment
% !TEX program  = pdfLaTeX 
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
odesandpdes --- A package for the streamlining of the use of
odes and pdes in mathematical texts typset by LaTeX

E-mail: anakin@ruc.dk
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

This package is the solution no one asked for, to a problem 
nobody had. Have you ever thought to yourself "wow, I sure do
dislike having to remember multiple macros for my odes and pdes"
and the author of this package has to agree, wholeheartedly.
In the modern world of "tik-toking" and "family guy surfing", 
our brains have rotted beyond salvage for even basic levels of 
cognitive recall. This package aims to fix this, through two
macros that have been set to each have an identical form and 
function. with an emphasis on intuitive use. Through setting 
options, the multiple common notational style are easily
swapped between, all by a single option.
You're Welcome.

----------------------------------------------------------------
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
odesandpdes --- A package for the streamlining of the use of 
odes and pdes in mathematical texts typset by LaTeX

E-mail: anakin@ruc.dk
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble
\postamble
File: odesandpdes.dtx

Copyright (C) 2024 by Anakin anakin@ruc.dk
-----------------------------------------------------------

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version. The latest version of this license is in the file:

    http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Anakin.

This work consists of the file  odesandpdes.dtx
and the derived files           odesandpdes.ins,
                                odesandpdes.pdf and
                                odesandpdes.sty.

\endpostamble
\usedir{tex/latex/odesandpdes}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/odesandpdes}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/odesandpdes}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{odesandpdes}[2024/01/11 v0.9.5 For streamlining ODE and PDE usage]
%
%</package>  
%<*driver>
\PassOptionsToPackage{hidelinks, breaklinks= true,
linkcolor = [rgb]{0,0,0}, urlcolor  = [rgb]{0,0,0}, citecolor = [rgb]{0,0,0},
pdfdisplaydoctitle = true,
pdfkeywords={LaTeX, dtx, source, odesandpdes, ODE, PDE, differentials},
pdfsubject={Optimizing useage of ODE and PDE commands for LaTeX},
pdfauthor={Anakin}, pdftitle={The odesandpdes package}}{hyperref}
\documentclass[11pt,a4paper]{ltxdoc}
\usepackage[T1]{fontenc}
\usepackage{indentfirst}
\usepackage[centering, vscale = 0.80, hscale = 0.65]{geometry}
\usepackage{mathptmx,amsmath,fdsymbol}
\usepackage{\jobname}
\usepackage{tikz}
\usetikzlibrary{graphs,quotes}
\makeatletter
\setlength{\parskip}{5\p@ plus2\p@ minus2\p@}
\setlength{\jot}{7\p@}
\makeatother
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
    \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \DoNotIndex{\def,\gdef,\global,\edef,\xdef,\long,\let,\futurelet}
% \DoNotIndex{\ifnum,\ifdim,\iftrue,\iffalse,\ifx,\ifcase,\else,\or,\fi}
% \DoNotIndex{\kern,\mkern,\setbox,\box}
% \DoNotIndex{\bgroup,\egroup,\begingroup,\endgroup,\begin,\end}
% \DoNotIndex{\relax,\endinput}
% \DoNotIndex{\csname,\endcsname,\string,\the,\noexpand,\expandafter}
% \DoNotIndex{\hbox,\raise,\lower,\vbox,\vtop,\vcenter,\left,\right}
% \DoNotIndex{\newcount,\newbox,\newtoks,\countdef}
% \DoNotIndex{\above,\atop,\over}
% \DoNotIndex{\cdot,\cdots,\dot,\dots,\prime}
% \DoNotIndex{\displaystyle,\scriptstyle,\scriptscriptstyle}
% \DoNotIndex{\advance,\count,\dimen}
% \DoNotIndex{\baselineskip,\lineskip}
% \DoNotIndex{\loop,\repeat}
% \DoNotIndex{\DeclareOptionX,\ExecuteOptionsX,\ProcessOptionsX}
% \DoNotIndex{\m@ne,\z@,\@ne,\tw@,\p@,\@@tmp}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \iffalse
%<*documentation>
% \fi
%
%
% \GetFileInfo{\jobname.sty}
%
% \author{Anakin\\ \texttt{anakin@ruc.dk}}
% \title{The \textsf{odesandpdes} package\thanks{This document 
%   corresponds to \textsf{odesandpdes}~\fileversion, dated \filedate.}}
% \date{Released \filedate}
%
% \maketitle
% 
%
% \changes{v1.0}{2024/01/11}{Initial version}
%
% \begin{abstract}
% This package is the solution no one asked for, to a problem 
% nobody had. Have you ever thought to yourself "wow, I sure do
% dislike having to remember \emph{multiple} macros for my odes and pdes"
% and the author of this package has to agree, wholeheartedly.
% In the modern world of "tik-toking" and "family guy surfing", 
% our brains have rotted beyond salvage for even basic levels of 
% cognitive recall. This package aims to fix this, through two
% macros that have been set to each have an identical form and 
% function, with an emphasis on intuitive use.
% Through setting options, the multiple
% common notational style are easily
% swapped between, all by a single option.
% \emph{You're welcome}.
% \end{abstract}
%
%
%
%
% {\setlength{\parskip}{0.25ex}\small
% \tableofcontents}
%
% \raggedright
%
% \newpage
% \section*{My funny little ODE/PDE package}
% \hspace{1em} Start by first having \verb|odesandpdes.sty| downloaded in an
% accessible directory, or in the same directory as your 
% overleaf main.tex, using it by inserting; 
% \begin{center}
% \cs{usepackage\oarg{options}\{odesandpdes\}}
% \end{center}
% into the preamble, Ideally after any font changing packages you use.
%
% \section{Usage}
% \subsection{Options}
%
% \DescribeMacro{\setDE}
% \hspace{1em} The options included are based off of the three most common notations
% (according to Wikipedia), Lagrange, Leibniz, and Newton. 
% However, if you wish to change it on a section to section basis,
% the command \cs{setDE\{\emph{notation}=\meta{option}\}} 
% will change the form of the subsequent uses.
%
% In the case of Lagrange or Netwon notation, there is the 
% \cs{setDE\marg{maxprimes=integer}} option for either the package 
% or the \cs{setDE\marg{option}} command;
%
%
%
% \hbox{\cs{usepackage[maxprimes=<integer>]{odesandpdes}}}
% \hbox{\cs{setDE\marg{maxprimes=\meta{integer}}}}
%
% 
% 3 being the default.
%
%
% \subsection{The Meat and Potatoes}
%
% \DescribeMacro{\ode}
% \DescribeMacro{\ode*}
% \hspace{1em} The command(s) are approached with the philosophy
% of of an intuitive and modular usage. 
% The general forms can be understood as;\par\noindent
% \hbox to \textwidth{\hss\vbox{
% \hbox{\cs{ode\oarg{variable}\meta{exponent}\marg{function}}} 
% \hbox{\cs{ode*\oarg{variable}\meta{exponent}}}}\hss}
%
% \DescribeMacro{\pde}
% \DescribeMacro{\pde*}
% and for the sake of parity, the PDE usage is identical;\par\noindent
% \hbox to \textwidth{\hss\vbox{
% \hbox{\cs{pde\oarg{variable}\meta{exponent}\marg{function}}} 
% \hbox{\cs{pde*\oarg{variable}\meta{exponent}}}}\hss}\par
%
% 
% ^^A \hspace{1em} While this should be sufficient for most use, 
% ^^A there are a couple of tricks incorporated into the mechanism 
% ^^A that makes this package better more exciting than a generic
% ^^A \cs{newcommand*\cs{ode}[2][t]\marg{\ldots}} command.
% ^^A Including automatic assignment of degree and starred variants. Example;
% ^^A \begin{verbatim}
%^^A \begin{align*}
%^^A    \ode N(t) = N(t) * t && \ode N(t,x) = N(t,x) + \ode[x]^2 N(t,x) && \pde^2 f^2
%^^A \end{align*}
% ^^A \end{verbatim}
%
% ^^A \vspace{-1em}
% ^^A \begin{align*}
% ^^A     \ode N(t) = N(t) * t &&\ode N(t,x) = N(t,x) + \ode[x]^2 gN(t,x) && \pde^2 f^2 
% ^^A \end{align*}
% ^^A \vspace{0.5em}
% ^^A The \cs{ode} command will scan for an exponent between
% ^^A \oarg{variable} and \marg{function}.
% ^^A Should there is indeed an exponent, that exponent gets `yoinked' away and 
% ^^A processed in accordance to the style of notation.  
%
% 
%
% There was rational in choosing to check for the exponent immediately after the macro command opposed to checking for the exponent at the end after the function. 
% As, often you would want add a higher degree very quickly as opposed to after defining the function.\ 
% \verb|\ode^2{f(x)}| as opposed to \verb|\ode{f(x)}^2|. 
% As well, with the ``proper'' spacing, there is little need for the use of the braces, so as to help promote an easier workflow without always needed to worry about the damn brace. Not that one can not use the brace for personal taste. 
% For the sake of parity, the \cs{pde} command will also take its variable in brackets.
%
%
% \newpage
% \section{Examples of use}
% 
% \stepcounter{subsection}
% \addcontentsline{toc}{subsection}{\thesubsection\quad Common Use Examples}
%
% To show the generality of use. The following examples all take identical form 
% in the \TeX/\LaTeX\ itself. 
% Additionally, in order to illustrate the functional boundries of the command with
% respect to each of the notational styles. 
% There is a variety of spacing and bracketing to help highlight these features,
% and will be shown in the following |verbatim| enviroment; 
%
% \centering
% \begin{minipage}{0.98\textwidth}
% \begin{verbatim}
%\begin{align*}
%\ode A(x)      && \ode[x]{B(x)} && \ode^1 C(x)     && \ode[x]^5 {D(x)} \\
%\ode* {E(x)}   && \ode*[x] F(x) && \ode*^2 {G(x)}  && \ode*[x]^6H(x)   \\
%\pde[t] I(x)   && \pde[x] {J(x)}&& \pde[t]^3K(x)   && \pde[x]^7 {L(x)} \\
%\pde*[t] {M(x)}&& \pde*[x]N(x)  && \pde*[t]^4 O(x) && \pde*[x]^8 P(x)
%\end{align*}
% \end{verbatim}
% \end{minipage}
% 
% \vbox{
% \hbox{\verb|\setDE{notation=Lagrange}| \emph{and/or} \verb|\usepackage[notation=Lagrange]{odesandpdes}|}
% \fbox{\parbox{0.65\textwidth}{
% \setDE{notation=Lagrange}
% \begin{align*}
%   \ode A(x)      && \ode[x]{B(x)} && \ode^1 C(x)     && \ode[x]^5 {D(x)} \\
%   \ode* {E(x)}   && \ode*[x] F(x) && \ode*^2 {G(x)}  && \ode*[x]^6H(x)   \\
%   \pde[t] I(x)   && \pde[x] {J(x)}&& \pde[t]^3K(x)   && \pde[x]^7 {L(x)} \\
%   \pde*[t] {M(x)}&& \pde*[x]N(x)  && \pde*[t]^4 O(x) && \pde*[x]^8 P(x)
% \end{align*}
% }}}\vspace{1.25em}
% 
% \vbox{
% \hbox{\verb|\setDE{notation=Leibniz}| \emph{and/or} \verb|\usepackage[notation=Leibniz]{odesandpdes}|}
% \fbox{\parbox{0.65\textwidth}{
% \setDE{notation=Leibniz}
% \begin{align*}
%   \ode A(x)      && \ode[x]{B(x)} && \ode^1 C(x)     && \ode[x]^5 {D(x)} \\
%   \ode* {E(x)}   && \ode*[x] F(x) && \ode*^2 {G(x)}  && \ode*[x]^6H(x)   \\
%   \pde[t] I(x)   && \pde[x] {J(x)} && \pde[t]^3K(x)   && \pde[x]^7 {L(x)} \\
%   \pde*[t] {M(x)}&& \pde*[x]N(x)  && \pde*[t]^4 O(x) && \pde*[x]^8 P(x)
% \end{align*}
% }}}\vspace{1.25em}
% 
% \vbox{
% \hbox{\verb|\setDE{notation=Newton}| \emph{and/or} \verb|\usepackage[notation=Newton]{odesandpdes}|}
% \fbox{\parbox{0.65\textwidth}{
% \setDE{notation=Newton}
% \begin{align*}
%   \ode A(x)      && \ode[x]{B(x)} && \ode^1 C(x)     && \ode[x]^5 {D(x)} \\
%   \ode* {E(x)}   && \ode*[x] F(x) && \ode*^2 {G(x)}  && \ode*[x]^6H(x)   \\
%   \pde[t] I(x)   && \pde[x] {J(x)}&& \pde[t]^3K(x)   && \pde[x]^7 {L(x)} \\
%   \pde*[t] {M(x)}&& \pde*[x]N(x)  && \pde*[t]^4 O(x) && \pde*[x]^8 P(x)
% \end{align*}
% }}}
% 
% \vbox{
% \hbox{\verb|\setDE{maxprimes=7}| \emph{and/or} \verb|\usepackage[maxprimes=7]{odesandpdes}|}
% \fbox{\parbox{0.65\textwidth}{
% \setDE{notation=Lagrange,maxprimes=7}
% \begin{align*}
% \ode^1 f &&\ode^2 f &&\ode^3 f &&\ode^4 f &&
% \ode^5 f &&\ode^6 f &&\ode^7 f &&\ode^8 f &&\ode^9 f 
% \end{align*}
% \setDE{notation=Newton}
% \vspace{-1.5em}
% \begin{align*}
% \ode^1 f &&\ode^2 f &&\ode^3 f &&\ode^4 f &&
% \ode^5 f &&\ode^6 f &&\ode^7 f &&\ode^8 f &&\ode^9 f 
% \end{align*}
% }}}
%
% \raggedright
%
% \subsection{"at x;" Usage Examples}
%
% 
% 
% \hspace{1em} Now, because the author is not an insane person, and went through the 
% effort of learning how TEX deconstructs text into constitute 
% registries and boxes, the way any sane person might. When using 
% a non-starred version of a command, after the function is defined, you can
% place an `|at|\textvisiblespace\meta{point}|;|', and the representation will 
% shown according to notational convention.
%
%
% \vbox{
% \begin{center}
% \begin{minipage}[c]{0.45\textwidth}
% \begin{verbatim}
%\begin{align*}
%    \ode[x]  c at 23\pi;   &= 1 \\
%    \ode[x]^3 c   at 69;   &= 2 \\
%    \ode[x]^{69} c at L;+t &= 3 \\
%    \ode[x]^9  c af 420;   &= 4 \\
%    \ode[x]^6  c  a t 13;  &= 5 
%\end{align*}
% \end{verbatim}
% \end{minipage}
% \end{center}
% \noindent
% \hbox{\begin{minipage}[t]{0.35\textwidth}
% \setDE{notation=Lagrange}
% \noindent\setlength{\jot}{2em}
% \begin{verbatim}
%\setDE{notation=Lagrange}
% \end{verbatim}
% \vspace{-1em}
%\begin{align*}
%    \ode[x]  c at 23\pi;   &= 1 \\
%    \ode[x]^3 c   at 69;   &= 2 \\
%    \ode[x]^{69} c at L;+t &= 3 \\
%    \ode[x]^9  c af 420;   &= 4 \\
%    \ode[x]^6  c  a t 13;  &= 5 
%\end{align*}
% \end{minipage}}\vline~
% \hbox{\begin{minipage}[t]{0.34\textwidth}
% \setDE{notation=Leibniz} 
% \noindent\setlength{\jot}{0.70em}
% \begin{verbatim}
%\setDE{notation=Leibniz}
% \end{verbatim}
% \vspace{-1em}
%\begin{align*}
%    \ode[x]  c at 23\pi;   &= 1 \\
%    \ode[x]^3 c   at 69;   &= 2 \\
%    \ode[x]^{69} c at L;+t &= 3 \\
%    \ode[x]^9  c af 420;   &= 4 \\
%    \ode[x]^6  c  a t 13;  &= 5 
%\end{align*}
% \vphantom{l}
% \end{minipage}}\vline~
% \hbox{\begin{minipage}[t]{0.32\textwidth}
% \setDE{notation=Newton}
% \noindent\setlength{\jot}{1.75em}
% \begin{verbatim}
%\setDE{notation=Newton}
% \end{verbatim}
% \vspace{-1em}
%\begin{align*}
%    \ode[x]  c at 23\pi;   &= 1 \\
%    \ode[x]^3 c   at 69;   &= 2 \\
%    \ode[x]^{69} c at L;+t &= 3 \\
%    \ode[x]^9  c af 420;   &= 4 \\
%    \ode[x]^6  c  a t 13;  &= 5 
%\end{align*}
% \end{minipage}}}
%
% \hspace{1em} As can be seen in the examples, this `\emph{modifier}' is robust
% enough that one can write effectively any combination of characters
% after the function, excluding , \emph{verbatim}, `|at |' and it will work as intended.
%
%
%
% \vbox{
% \hspace{1em} \emph{Important to note}, due to a slight difference in how the
% notational styles are defined, 
% only the Leibniz notation can take arguments for the 
% function that involve subscripts and superscripts without delimiters.
% Mostly easily illustrated in this following 
% example using the \cs{pde} command;
% \begin{center}
% \begin{minipage}[c]{0.45\textwidth}
% \begin{verbatim}
%\begin{align*}
%   \pde[y]   f_1         &= 1 \\
%   \pde[y]   f_1   at L; &= 2 \\
%   \pde[y]   f     at L; &= 3 \\
%   \pde[y] {(f_1)}       &= 4 \\
%   \pde[y] {(f_1)} at L; &= 5
%\end{align*}
% \end{verbatim}
% \end{minipage}
% \end{center}
% \noindent
% \hbox{\begin{minipage}[t]{0.35\textwidth}
% \setDE{notation=Lagrange}
% \noindent\setlength{\jot}{1.80em}
% \begin{verbatim}
%\setDE{notation=Lagrange}
% \end{verbatim}
% \vspace{-1em}
%\begin{align*}
%   \pde[y]   f_1         &= 1 \\
%   \pde[y]   f_1   at L; &= 2 \\
%   \pde[y]   f     at L; &= 3 \\
%   \pde[y] {(f_1)}       &= 4 \\
%   \pde[y] {(f_1)} at L; &= 5
%\end{align*}
% \end{minipage}}\vline~
% \hbox{\begin{minipage}[t]{0.34\textwidth}
% \setDE{notation=Leibniz} 
% \noindent\setlength{\jot}{0.75em}
% \begin{verbatim}
%\setDE{notation=Leibniz}
% \end{verbatim}
% \vspace{-1em}
%\begin{align*}
%   \pde[y]   f_1         &= 1 \\
%   \pde[y]   f_1   at L; &= 2 \\
%   \pde[y]   f     at L; &= 3 \\
%   \pde[y] {(f_1)}       &= 4 \\
%   \pde[y] {(f_1)} at L; &= 5
%\end{align*}
% \vphantom{l}
% \end{minipage}}\vline~
% \hbox{\begin{minipage}[t]{0.32\textwidth}
% \setDE{notation=Newton}
% \noindent\setlength{\jot}{1.75em}
% \begin{verbatim}
%\setDE{notation=Newton}
% \end{verbatim}
% \vspace{-1em}
%\begin{align*}
%   \pde[y]   f_1         &= 1 \\
%   \pde[y]   f_1   at L; &= 2 \\
%   \pde[y]   f     at L; &= 3 \\
%   \pde[y] {(f_1)}       &= 4 \\
%   \pde[y] {(f_1)} at L; &= 5
%\end{align*}
% \end{minipage}}
% }
%
% \subsection{Prime Count Limits}
% \hspace{1em} Because the Newton and Lagrange notation is procedural;
% the only limit is your imagination, and also the fact that 
% \TeX\ can only have something like 127 unplaced tokens at a time.
% \begin{center}
% \begin{verbatim}
% \setDE{maxprimes=69}
% \end{verbatim}
% \end{center}
% \vspace{-1.5em}
% \fbox{\parbox{\textwidth}{
% \setDE{maxprimes=69}
% \begin{minipage}{0.45\textwidth}
% \setDE{notation=Lagrange}
% \begin{equation*}
%    \begin{split}
%       \ode^{5}  f \\
%       \ode^{16} f \\
%       \ode^{32} f \\
%       \ode^{54} f \\
%       \ode^{69} f \\
%       \ode^{70} f \\
%    \end{split}
% \end{equation*}
% \end{minipage}~
% \begin{minipage}{0.05\textwidth}
% \setDE{notation=Lagrange}
% \begin{equation*}
%    \begin{split}
%       \boxed{5}  \\
%       \boxed{16} \\
%       \boxed{32} \\
%       \boxed{54} \\
%       \boxed{69} \\
%       \boxed{70} \\
%    \end{split}
% \end{equation*}
% \end{minipage}~
% \begin{minipage}{0.45\textwidth}
% \setDE{notation=Newton}
% \begin{equation*}
%       \ode^{5}  f \quad
%       \ode^{16} f \quad
%       \ode^{32} f \quad
%       \ode^{54} f \quad
%       \ode^{69} f \quad
%       \ode^{70} f \quad
% \end{equation*}
% \begin{equation*}
%       \mkern-15mu\boxed{5}  
%       \boxed{16}
%       \boxed{32} 
%       \boxed{54}
%       \boxed{69} 
%       \boxed{70} 
% \end{equation*}
% \end{minipage}}}
%
%
% ^^A Truly beautiful.\par\vspace{1em}
%
% ^^A In the next semester I expect to try seeing if its possible to, given that you put multiple variable in the options, to procedurally generate partials that address separate variables sequatentially.
% ^^A  \begin{equation*}
%  ^^A     \frac{\partial^2}{\partial x \partial y}
% ^^A  \end{equation*}
%
% 
%
%\StopEventually{^^A
%  \PrintChanges
% ^^A \PrintIndex
%	}
%
%
% \iffalse
%</documentation>
% \fi
%
% ^^A************************************************ [odesandpdes.sty]
% \newpage
% \section{Package Implementation}
% 
% \iffalse
%<*package>
% \fi
% 
%
% \subsection{Set-up}
% \iffalse
%<package>%% ----------------------------------------------------------------
%<package>%% Package initialize
%<package>%% ----------------------------------------------------------------
% \fi
%
% 
% Package options are difficult to deal with, so using the |xkeyval| package
% alleviates much of the \emph{pain} associated with it,
%    \begin{macrocode}
\RequirePackage{xkeyval}    
%    \end{macrocode}
% 
% \begin{macro}{\m@xm@rk}\begin{macro}{\expo@c@unt}\begin{macro}{\@detempv@l}
% \hspace{1em} Being that there are a lot of minor calculations within the package
% reserving registries for integer counts feels like a good idea
%    \begin{macrocode}
\newcount\m@xm@rk%
\newcount\expo@c@unt%
\countdef\@detempv@l=255%
%    \end{macrocode}
% \end{macro}\end{macro}\end{macro}
%
% \begin{macro}{\v@rr@t@ks}\begin{macro}{\func@t@ks}\begin{macro}{\@tpost@ks}
% As well reserving token registries for tossing arguments around 
% the groups and macros,
%    \begin{macrocode}
\newtoks\v@rr@t@ks%
\newtoks\func@t@ks%
\newtoks\@tpost@ks%
%    \end{macrocode}
% \end{macro}\end{macro}\end{macro}
%
% \begin{macro}{\@dev@rb@x}\begin{macro}{\@defunb@x}\begin{macro}{\@deresb@x}
% Reserving box registries for the purpose of collecting the components
% together in \newline a coherent manner,
%    \begin{macrocode}
\newbox\@dev@rb@x%
\newbox\@defunb@x%
\newbox\@deresb@x%
%    \end{macrocode}
% \end{macro}\end{macro}\end{macro}
%
%
% \subsubsection{Package Options}
% \iffalse
%<package>%% ----------------------------------------------------------------
%<package>%% Package Options
%<package>%% ----------------------------------------------------------------
% \fi
%
%
% \begin{macro}{\@de@option}
% \hspace{1em} Defining the package options for notational styles
% using the \LaTeX\ \cs{providecommand} to reloading times.
% Important to note that defining the command is not the same
% as using the command, which is useful in conjunction with \cs{csname}
% and \cs{endcsname} for macro defintions.
%    \begin{macrocode}
\providecommand\@de@option{Leib} 
%    \end{macrocode}
%
% Now using the |keyval| package, it becomes possible to define
% a family of package options associated with inputing some |notation=#1|.
% This allows for easily defining the notation for the entire document.
% The possible options will be defined afterwards,
%    \begin{macrocode}
\DeclareOptionX{notation}[default]%
    {\def\@de@option{\csname @de@not@#1\endcsname}}%
%    \end{macrocode}
% \end{macro} 
%
% \begin{macro}{\@de@not@Lagrange}
% \begin{macro}{\@de@not@Leibniz}
% \begin{macro}{\@de@not@Newton}
%
% \hspace{1em} Once the package option has been declared, 
% now the options can be defined. The options take identical form
% with the exception of the last part of definition.
% This is because the \cs{@de@option} is not the macro used for 
% the notation definitions. Rather, \cs{@de@option} is an intermediate
% that expands into one of the defined options, which subsequently 
% expands into one of the four character strings,
% ``|Lagr|'',``|Leib|'', or ``|Newt|''
% \begin{center}\vspace{-0.75em}
% \makeatletter
% \tikz[every node/.style={minimum size=1.5em},line width=0.9pt] 
% \graph[no placement,y=0]
% {\string\@de@option[x=0] ->[bend right,"expands to"'] 
% \string\@de@not@``option''[x=3.5] ->[bend left,"expands to"] 
% ``string''[x=6.5]};
% \makeatother
% \end{center}
% 
%    \begin{macrocode}
\def\@de@not@Lagrange{Lagr}
\def\@de@not@Leibniz{Leib}
\def\@de@not@Newton{Newt}
%    \end{macrocode}
% \begin{macro}{\@de@not@default}
% \hspace{1em} The default option for the notation is defined by 
% pointing to the definition of the |Leibniz| notation option,
%    \begin{macrocode}
\let\@de@not@default\@de@not@Leibniz
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
% A second option is defined to allow freedom in deciding the cut-off point 
% for the Lagrange and Newton notations where it no longer makes more
% physical marks and uses the symbolic extension instead, with a default
% of 3 marks before becoming symbolic.
%    \begin{macrocode}
\DeclareOptionX{maxprimes}[3]%
    {\m@xm@rk=#1\advance\m@xm@rk1}%
%    \end{macrocode}
%
%
% To ensure that all other options given to the package will be ignored
% the star is used to indicate that all undefined options will be directed
% towrds this declared option,
%    \begin{macrocode}
\DeclareOptionX*{\PackageWarning{odesandpdes}{`\CurrentOption' ignored}}
%    \end{macrocode}
% Finally the declared options are excecuted as to allow the default
% options to initialize and be processed,
%    \begin{macrocode}
\ExecuteOptionsX{notation,maxprimes}
\ProcessOptionsX\relax 
%    \end{macrocode}
%
% \subsection{Package Configuration}\label{sec:options}
% Macro for notation style option to be used by \cs{setDE}
% Macro for number of primes to be used by \cs{setDE}
%
%
%
%    \begin{macrocode}
\define@key[package]{@de}{notation}%
    {\def\@de@option{\csname @de@not@#1\endcsname}}
\define@key[package]{@de}{maxprimes}%
    {\m@xm@rk=#1\advance\m@xm@rk1}
%    \end{macrocode}
%
%
% \begin{macro}{\setDE}
% Macro for switching of the style mid-document
%    \begin{macrocode}
\newcommand\setDE[1]%
    {\setkeys[package]{@de}{#1}}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{To not conflict with amsmath}
%
% \begin{macro}{\@de@ver}
% \begin{macro}{\@de@top}
% \begin{macro}{\@de@bove}
%
% \hspace{1em} Purely because amsmath is a bitch and doesn't want 
% anyone enjoying their time in \TeX\ it becomes required to make 
% compatibility checks and work within their abstracted definitions,
%    \begin{macrocode}
\@ifpackageloaded{amsmath}{
    \let\@de@ver=\@@over%
    \let\@de@top=\@@atop%
    \let\@de@bove=\@@above}%
%    \end{macrocode}
% Otherwise it just uses the \TeX\ primitives for ease of function,
%    \begin{macrocode}
    {\let\@de@ver=\over%    
    \let\@de@top=\atop% 
    \let\@de@bove=\above}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \subsection{Foundational macros}
% \iffalse
%<package>%% ----------------------------------------------------------------
%<package>%% Package Macros 
%<package>%% ----------------------------------------------------------------
% \fi
%
% \begin{macro}{\d@@}\begin{macro}{\d@l} 
% \hspace{1em} Creating protected macro definitions for increase in 
% speed of processes,
%    \begin{macrocode}
\def\d@@{\mathrm d} 
\let\d@l=\partial   
%    \end{macrocode}
% \begin{macro}{\@dem@rkst@red}\begin{macro}{\@dem@rkn@st@r}
% \hspace{1em} In the same vein, strings are defined for the starred and unstarred versions of 
% macro commands,
%    \begin{macrocode}
\def\@dem@rkst@red{st@r@d}
\def\@dem@rkn@st@r{n@st@r}
%    \end{macrocode}
% \end{macro}\end{macro}
% \end{macro}\end{macro}
% 
%
% \begin{macro}{\ode}\begin{macro}{\pde}
% \hspace{1em} The macro definitions of the ODE and PDE commands
%    \begin{macrocode}
\def\ode{\let\@de@perat@r=\d@@% sets the d
    \csname \@de@option ode\endcsname}
\def\pde{\let\@de@perat@r=\d@l% sets the del
    \csname \@de@option pde\endcsname} 
%    \end{macrocode}
% In essence these two are the same command.
% This is done for the sake of consistancy in use and effect.
% The only difference comes down to how the operator is defined
% \end{macro}\end{macro}
% 
%
%
% 
% \begin{macro}{\Lagrode}\begin{macro}{\Lagrpde}
%
% The macro definitions of the ODE and PDE commands
%    \begin{macrocode}
\def\Lagrode{
    \@de@ifst@r}
\def\Lagrpde{
    \@de@ifst@r} 
%    \end{macrocode}
% \end{macro}\end{macro} 
%
%
% \begin{macro}{\Leibode}\begin{macro}{\Leibpde}
%    \begin{macrocode}
\def\Leibode{
    \@de@ifst@r}
\def\Leibpde{
    \@de@ifst@r} 
%    \end{macrocode}
% \end{macro}\end{macro}
%
%
% \begin{macro}{\Newtode}\begin{macro}{\Newtpde}
%    \begin{macrocode}
\def\Newtode{
    \@de@ifst@r}
\def\Newtpde{
    \@de@ifst@r} 
%    \end{macrocode}
% In essence these two are the same command.
% This is done for the sake of consistancy in use and effect.
% The only difference comes down to how the operator is defined
% \end{macro}\end{macro} 
%
%
% \subsubsection{Macro `Checkpoints'}
% \begin{macro}{\@de@ifst@r}
% \begin{macro}{\@de@ifbr@ck}
% \begin{macro}{\@de@ifexp@n}
% \hspace{1em}Now a group of `what's next' functions are needed. 
% Each of the major elements,
% star (|*|), option (|[|), and exponent (|^|) is given a macro. 
% These macros make use of an
% ancilliariy function \cs{@deifnextch@r}, 
% which is defined in the section \ref{sec:nextchar}.
%
%    \begin{macrocode}
\def\@de@ifst@r{\@deifnextch@r * 
    {\@deStarArgument\@dem@rkst@red\@dest@r@rg} 
    {\@deStarArgument\@dem@rkn@st@r\@dest@r@rg*}}
\def\@de@ifbr@ck{\@deifnextch@r [ 
    \@de@ption@l@rg 
    {\@de@ption@l@rg[t]}}
\def\@de@ifexp@n{\@deifnextch@r ^ 
    \@de@exponent@rg 
    {\@de@exponent@rg^1}}
%    \end{macrocode}
%
%
% \begin{macro}{\@deif@tpos}\begin{macro}{\@de@tDoubleCheck}
% \hspace{1em} In the same way, there also exist a macro to check 
% for the `at '. The main difference however,
%  is the follow up command that helps
% \emph{robustify} \cs{@deif@tpos}. This is done through absorbing all the 
% tokens after the `|a|' until the next space token, if there is only 
% a single token, and that token is a `|t|', then success! Otherwise
% nothing happens.
%    \begin{macrocode} 
\def\@deif@tpos{\@deifnextch@r a \@de@tDoubleCheck \@deFinalCompiledForm}
\def\@de@tDoubleCheck a#1 {\ifx#1t\expandafter\@de@tpos@rg\else
    \@deFinalCompiledForm a#1\fi}%
%    \end{macrocode}
% There is a way to make this function in a far more generalized way using
% \cs{csname} and \cs{endcsname}. However, as this package makes use of 
% this feature exactly \emph{once}, there is no benefit to
% generalizing the functionality
%
% \end{macro}
% \end{macro}\end{macro}
% \end{macro}\end{macro}
% 
%
% 
% \subsubsection{The `Yoinkers'}
% \begin{macro}{\@dest@r@rg}
% \begin{macro}{\@de@ption@l@rg}\begin{macro}{\@de@exponent@rg}
% \begin{macro}{\@dest@r@dy@ink}\begin{macro}{\@den@st@ry@ink}
% Macros for starred and unstarred varients
%    \begin{macrocode}
\def\@dest@r@rg*{\expandafter\@de@ifbr@ck}
%    \end{macrocode}
%
% Macro for optional and no optional args 
%    \begin{macrocode}
\def\@de@ption@l@rg[#1]{\expandafter\v@rr@t@ks{#1}\relax \@de@ifexp@n}% 
%    \end{macrocode}
%
% Macro for yoinking the exponent
%    \begin{macrocode}
\def\@de@exponent@rg^#1{\expo@c@unt#1\relax \@deIsItOrIsntItAStar}
%    \end{macrocode}
%
% Yoinks the function variable
%    \begin{macrocode}
\def\@dest@r@dy@ink{\expandafter\@deFinalCompiledForm}
\def\@den@st@ry@ink{\expandafter\@deChooseYoinkForm}
%    \end{macrocode}
% \end{macro}\end{macro}\end{macro}
% \end{macro}\end{macro}
%
% \begin{macro}{\@de@func@Leib}
% \begin{macro}{\@de@func@Lagr}
% \begin{macro}{\@de@func@Newt}
% \begin{macro}{\@de@func@ther}
%   
% Possibly make a function to keep eating tokens till a space is found?
% Could work on account of the \cs{func@t@ks}
%    \begin{macrocode}
\def\@de@func@Leib{\expandafter\func@t@ks{}%
    \expandafter\@deuntilsp@ce}
\def\@de@func@ther#1{\expandafter\func@t@ks{#1}\relax
    \@deif@tpos}
\let\@de@func@Lagr\@de@func@ther
\let\@de@func@Newt\@de@func@ther
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% 
% \subsection{Ancilliary Functions}
% \iffalse
%<package>%% ----------------------------------------------------------------
%<package>%% Ancilliary Package Functions
%<package>%% ----------------------------------------------------------------
% \fi
% \subsubsection{Variable Macronames}
%
% \begin{macro}{\@deStarArgument}
% \begin{macro}{\@deIsItOrIsntItAStar}
% \begin{macro}{\@deFinalCompiledForm}
%
% \hspace{1em}It becomes useful to be able to freely define which macro 
% to be used when going through the option tree.
% Subsequently, three macros are defined
% to fufill that purpose. \cs{@deStarArgument} takes an argument and defines 
% two macros \cs{@deIsItOrIsntItAStar} which defines 
% whether the function `yoinker' exists or not, and \cs{@deFinalCompiledForm}
% which works with \cs{@de@option},defined in subsection \ref{sec:options}, 
% to define the final ODE or PDE form.
%    \begin{macrocode}
\def\@deStarArgument#1{%
    \def\@deIsItOrIsntItAStar{\csname @de#1y@ink\endcsname}%
    \def\@deFinalCompiledForm{\csname#1@\@de@option\endcsname}}
%    \end{macrocode}
% \end{macro}\end{macro}\end{macro}
% 
%
%
%
%
% \begin{macro}{\@de@t@posf@rm}\begin{macro}{\@deChooseYoinkForm}
% \hspace{1em} Additional macros are also defined for determining 
% intermediate forms during the construction
% process of the resulting ODEs and PDEs
%    \begin{macrocode}
\def\@de@t@posf@rm{\csname @de@tpl@ce@\@de@option\endcsname}%
\def\@deChooseYoinkForm{\csname @de@func@\@de@option\endcsname}%
%    \end{macrocode}
% \end{macro}\end{macro}
%
%
%
% \begin{macro}{\@de@tpos@rg}
% Used for choosing which notational form to take
%    \begin{macrocode}
\def\@de@tpos@rg#1;{\expandafter\@tpost@ks{#1}\relax \@de@t@posf@rm}
%    \end{macrocode}
% \end{macro}
% 
% \subsubsection{Determing the next token}\label{sec:nextchar}
% \hspace{1em} An integral part of the `\emph{mastication}' process
% is the identification of the proceeding token in the oncoming token stream.
% Therefore, a macro is defined to streamline this process instead of needing
% to create a unique \cs{futurelet} sequence for each token type.\par
% \hspace{1em} The use of \cs{futurelet} is a strange and arcane process
% that better described by occult terminology than the proper scientific
% terms one would use in daily life.
% However, it is important to understand at least a little bit for the
% implementation of the \cs{@deifnextch@r} macro. 
%
% \begin{macro}{\@deifnextch@r}\begin{macro}{\@detesttoken}
% 
% \begin{macro}{\@de@tmpA}\begin{macro}{\@de@tmpB}
%
% \hspace{1em} \cs{@deifnextch@r} takes in three tokens as arguments, 
% the first argument will assign \cs{@detesttoken} and be
% what the macro looks out for, 
% while the other two arguments are for storage to be excecuted later. 
% Building off this, there are two main elements that compose the macro, 
% the namesake \cs{@deifnextch@r}, and its supplement macro 
% \cs{@denext@rg}. This is because \cs{futurelet} is a primitive that will
% act as the \cs{let} primitive, just one token removed.
%
% \begin{minipage}[b]{0.45\textwidth}
%    \tikz \graph[grow right = 1.5cm]{ 
%    \string\let -!- token1 <- token2 -!- token3 };
% \end{minipage}~
% \begin{minipage}[b]{0.45\textwidth}
%    \tikz \graph[grow right = 1.5cm]{ 
%    \string\futurelet -!- token1 -!- token2 -!- token3, 
%    token1 <-[bend left, "\string\let\ token1 token3"] token3 };
% \end{minipage}
%
% 
% \hspace{1em} The most important consequence is that, 
% should \cs{futurelet} be enacted upon a stream of three 
% tokens, ``\cs{futurelet}| token1 token2 token3|''; |token1| will be \cs{let} 
% to point at |token3| \emph{before} 
% |token2| is expanded. What this means, is one is able to have |token3|
% \emph{act upon the unexpanded} 
% |token2|.\footnote{If this means something to you, it's too late. 
% You've lost your chance of escaping \TeX.} 
%    \begin{macrocode}
\def\@deifnextch@r#1#2#3{%
    \let\@dedesiredtoken=#1\relax
    \def\@de@tmpA{#2} \def\@de@tmpB{#3}
    \futurelet\@detesttoken\@denext@rg}
%    \end{macrocode}
% \hspace{1em} Using this \emph{enlightenment}, 
% define the token representing an
% `|if-then-else|' control sequence \cs{@denext@rg}. In 
% \cs{@deifnextch@r},  \cs{@dedesiredtoken} becomes a macro for
% the token we want to check against. Using this to our advantage, 
% before \TeX\ expands \cs{@denext@rg}, it will assign \cs{@detesttoken}
% to point to a third, currently, unknown token after \cs{@denext@rg}.
% This is where the magic happens; because \cs{@denext@rg} only expands
% \emph{after} the assignment of \cs{@detesttoken}, meaning it becomes
% possible to compare \cs{@detesttoken} and \cs{@dedesiredtoken} against
% eachother to determine which outcome should be excecuted.\par
% \end{macro}\end{macro}
% 
% \end{macro}\end{macro}
% 
%
%
% \begin{macro}{\@denext@rg}\begin{macro}{\@de@nextact}
% 
% \hspace{1em} The first half of \cs{@denext@rg} ensures that a
% space tokens does not get in the way of assignment,
% as unfortunate as it is, the \cs{futurelet} primitive \emph{does}
% consider a space token to be a valid token to point to.
% 
%    \begin{macrocode}
\def\@denext@rg{%
    \ifx\@detesttoken\@sptoken%
        \let\@de@nextact\@degobblesp@ce\else
%    \end{macrocode}
% \hspace{1em} The second half of \cs{@denext@rg} is what does 
% the actual comparison. Should the comparison be positive,
% \cs{@detesttoken} = \cs{@dedesiredtoken}, then the code stored
% in \cs{@de@tmpA} will be excecuted, otherwise, \cs{@de@tmpB} excecutes.
%    \begin{macrocode}
        \ifx\@detesttoken\@dedesiredtoken%   if 
            \let\@de@nextact\@de@tmpA\else%  ifn't
            \let\@de@nextact\@de@tmpB\fi\fi
    \@de@nextact}
%    \end{macrocode}
%
% \begin{macro}{\@degobblesp@ce}
% \iffalse
%<package>\let\@desavedef\<
% \fi
%
% \hspace{1em} Ensuring that the space(s), explicit or implicit, trailing after 
% \cs{@deifnextch@r} requires some \TeX\ \emph{tomfoolary}. 
% By defining the function with a non-character token, the space matters
%    \begin{macrocode}
\def\<{\@degobblesp@ce} 
\expandafter\def\< {\futurelet\@detesttoken\@denext@rg}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@deuntilsp@ce}
% \begin{macro}{\@deifnotsp@ce}
% \begin{macro}{\@det@ksgobbler}
%    \begin{macrocode}
\def\@deuntilsp@ce#1{\beginnext%
    \toks0={\the\func@t@ks#1}
    \edef\next{\func@t@ks=\expandafter{\the\toks0}}
    \endnext\@deifnotsp@ce}
%    \end{macrocode}
%    \begin{macrocode}
\def\@deifnotsp@ce{%
    \futurelet\@detesttoken\@det@ksgobbler}
\def\@det@ksgobbler{%
    \ifx\@detesttoken\@sptoken%
        \expandafter\@deif@tpos\else%
        \expandafter\@deuntilsp@ce\fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
% \begin{macro}{\beginnext}
% \begin{macro}{\endnext}
%
% \hspace{1em} The \cs{beginnext}, \cs{endnext} construct
% is a relatively common construct one finds when working with
% variable macros and subsequently working with \cs{edef} commands. 
% Using the explicit \cs{begingroup} and \cs{endgroup} group denotions
% means that one can play all sorts of registry based games, 
% that can not be broken by implicit groupings.
% By \cs{edef}'ing \cs{next} inside this construct, whatever finalized
% product you have assigned to \cs{next}, will be a fully expanded 
% assortment of values from those registries.
%    \begin{macrocode}
\def\beginnext{\begingroup
    \let\next\undefined}
\def\endnext{\expandafter\endgroup\next}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
%
% \subsection{Notational Morphology}
% \iffalse
%<package>%% ----------------------------------------------------------------
%<package>%% Package Notations
%<package>%% ----------------------------------------------------------------
% \fi
%
% \begin{macro}{\st@r@d@Lagr}
% Macro for Lagr+star
%    \begin{macrocode}
\def\st@r@d@Lagr{%
    \setbox\@deresb@x\hbox{$
        {f^{\mkern1mu\m@kem@rk\lagr@prime\lagr@prime\br@ced@xpon}
        _{\m@kep@rtLagr}}\mkern-2mu\left(\the\v@rr@t@ks\right)
        $}%
    \@derele@se}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\st@r@d@Leib}
%  Macro for Leib+star
%    \begin{macrocode}
\def\st@r@d@Leib{%
    \setbox\@defunb@x\hbox{$\@de@perat@r^{\empty@rexpon}$}%
    \b@se@Leib}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\st@r@d@Newt}
%  Macro for Newt+star
%    \begin{macrocode}
\def\st@r@d@Newt{%     
    \setbox\@dev@rb@x\hbox{$\the\v@rr@t@ks$}%
    \b@se@Newt}%
%    \end{macrocode}
% \end{macro}
%
%
%
%
% \begin{macro}{\n@st@r@Lagr}
% Macro for Lagr
%    \begin{macrocode}
\def\n@st@r@Lagr{%
    \setbox\@deresb@x\hbox{$
        {\the\func@t@ks
        ^{\mkern1mu\m@kem@rk\lagr@prime\lagr@prime\br@ced@xpon}
        _{\m@kep@rtLagr}}\mkern-1mu
        $}%
    \@derele@se}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\n@st@r@Leib}
%  Macro for Leib
%    \begin{macrocode}
\def\n@st@r@Leib{%  
    \setbox\@defunb@x\hbox{$
        \mkern0.40mu\@de@perat@r^{\empty@rexpon}\the\func@t@ks$}%
    \b@se@Leib}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\n@st@r@Newt}
%  Macro for Newt
%    \begin{macrocode}
\def\n@st@r@Newt{% 
    \setbox\@dev@rb@x\hbox{$\displaystyle\the\func@t@ks$}%
    \b@se@Newt}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@de@tpl@ce@Lagr}
% Macro for Lagr at point
%    \begin{macrocode}
\def\@de@tpl@ce@Lagr{%
    \noexpand\hbox{$
        \n@st@r@Lagr\mkern-03mu\left(\the\@tpost@ks\right)
        $}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@de@tpl@ce@Leib}
% Macro for specification of where the ode is defined
%    \begin{macrocode}
\def\@de@tpl@ce@Leib{%
    \noexpand\hbox{$
        \left.\n@st@r@Leib\mkern0mu\right|
        _{\mkern1mu\displaystyle\the\v@rr@t@ks\mkern2mu
        \rlap{$\scriptstyle=\mkern2mu\the\@tpost@ks$}}
        $}%
    }%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@de@tpl@ce@Newt}
% Macro for Newton at point
%    \begin{macrocode}
\def\@de@tpl@ce@Newt{%
    \noexpand\hbox{$
        \n@st@r@Newt\mkern-02mu\left(\the\@tpost@ks\right)
        $}}%
%    \end{macrocode}
% \end{macro}
%
%
%
%
%
%
%
% \begin{macro}{\b@se@Leib}
% Macro for the base Leibniz form
%    \begin{macrocode}
\def\b@se@Leib{%
    \setbox\@dev@rb@x\hbox{$
        \@de@perat@r\mkern0.40mu\the\v@rr@t@ks^{\empty@rexpon}$}%
    \setbox\@deresb@x\hbox{\kern0.50\p@%
        $\raise2\p@\box\@defunb@x\@de@ver\lower5\p@\box\@dev@rb@x$%
        \kern0.50\p@}%
    \@derele@se}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\b@se@Newt}
% Macro for the base Netwon form
%    \begin{macrocode}
\def\b@se@Newt{%
    \setbox\@defunb@x\hbox{\vbox{\baselineskip=\z@\lineskip=-1\p@%
        \m@kem@rk\@ned@ts\tw@d@ts\newt@nd@t}}%
    \setbox\@deresb@x\hbox{\vbox{\baselineskip=\z@\lineskip=-0.5\p@%
        \hbox{\raise0.00ex\box\@defunb@x}%
        \hbox{\raise0.00ex\box\@dev@rb@x}}}%
    \@derele@se}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\m@kep@rtNewt}
% Macro for Netwon partial notations
%    \begin{macrocode}
\def\m@kep@rtNewt{\ifx\@de@perat@r\d@l\empty\fi}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%
% \subsection{Notational Shaping Tools}
%
% \begin{macro}{\lagr@prime}
% \begin{macro}{\br@ced@xpon}
% \begin{macro}{\m@kep@rtLagr}
% Macro for the prime used by the lagrangian notation
%    \begin{macrocode}
\def\lagr@prime{\mkern0.35mu\prime\global\advance\expo@c@unt-1}
%    \end{macrocode}
%
% Macro for making the exponent in parenthesis
%    \begin{macrocode}
\def\br@ced@xpon{\left(\the\expo@c@unt\right)}
%    \end{macrocode}
%
% Macro for Lagrange partial notations
%    \begin{macrocode}
\def\m@kep@rtLagr{\ifx\@de@perat@r\d@l\the\v@rr@t@ks\else\empty\fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\newt@nd@t}
% Macro for numbering
%    \begin{macrocode}
\def\newt@nd@t{\hbox{\vbox{%
    \hbox to 5\p@{\hss\raise0.50ex\hbox{$\scriptstyle\empty@rexpon$}\hss}%
    \hbox to 5\p@{\hss\hbox{$\displaystyle\cdot$}\hss}}}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\tw@d@ts}
% \begin{macro}{\@ned@ts}
% Macro for dots
% Tests as "mod2" testing of dot groupings
%    \begin{macrocode}
\def\tw@d@ts{\ifnum\expo@c@unt>1%
        \advance\expo@c@unt-2\hbox to 5\p@{\hss$\cdot\cdot$\hss}\fi}%    
\def\@ned@ts{\@detempv@l=\the\expo@c@unt%
    \loop\ifnum\@detempv@l>2%
        \advance\@detempv@l-2\repeat%
    \ifnum\@detempv@l<2%
        \advance\expo@c@unt-1\hbox to 5\p@{\hss$\cdot$\hss}\fi}%    
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\empty@rexpon}
% Macro for determining if the exponent should be empty
%    \begin{macrocode}
\def\empty@rexpon{\ifnum2>\expo@c@unt\empty\else\the\expo@c@unt\fi}
%    \end{macrocode}
%
% \begin{macro}{\m@kem@rk}
% Macro for checking if marks should be used or something else
% If not zero, check if less than max allowed
% Make primes while below limit
%    \begin{macrocode}
\def\m@kem@rk#1#2#3{
    \ifnum\expo@c@unt<\m@xm@rk
        #1\m@rkrepe@ting#2\else
        #3\fi}
%    \end{macrocode}
%
% \begin{macro}{\m@rkrepe@ting}
% Macro for creating the appropriate number of marks, primes or whatever 
%    \begin{macrocode}
\def\m@rkrepe@ting#1{\loop\ifnum\expo@c@unt>0#1\repeat}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@derele@se}
% Shorthand for allowing the boxes to rise to the serface
%    \begin{macrocode}
\def\@derele@se{\noexpand{\box\@deresb@x}}
%    \end{macrocode}
% \end{macro}
% 
% \iffalse
%</package>
% \fi
%
% \iffalse
%<package>%% ----------------------------------------------------------------
%<package>%% Package End
%<package>%% ----------------------------------------------------------------
% \fi
% 
% \iffalse
%<package>\let\<\@desavedef
%<package>\endinput
% \fi
%
%
%
%
% \Finale